require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe Api::V1::CategoriesController, :type => :controller do
  it_behaves_like "api_controller"

  # This should return the minimal set of attributes required to create a valid
  # Category. As you add validations to Category, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {
      name: "Example Category",
      sheet_id: sheet.id,
    }
  }

  let(:invalid_attributes) {
    { name: "", sheet: nil }
  }

  let!(:sheet) { create(:sheet) }
  let!(:category) { create(:category) }

  describe "GET index" do
    it "assigns all categories as @categories" do
      get :index, { format: :json }
      expect(assigns(:categories)).to eq([category])
    end
  end

  describe "GET show" do
    it "assigns the requested category as @category" do
      get :show, { id: category.id, format: :json }
      expect(assigns(:category)).to eq(category)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Category" do
        expect {
          post :create, { category: valid_attributes, format: :json }
        }.to change(Category, :count).by(1)
      end

      it "assigns a newly created category as @category" do
        post :create, { category: valid_attributes, format: :json }
        expect(assigns(:category)).to be_a(Category)
        expect(assigns(:category)).to be_persisted
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved category as @category" do
        post :create, { category: invalid_attributes, format: :json }
        expect(assigns(:category)).to be_a_new(Category)
      end

      it "re-renders the 'new' template" do
        post :create, { category: invalid_attributes }
        expect(response.status).to eq(422)
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      let(:new_attributes) {
        {
          name: "Example Updated Category",
          sheet: build(:sheet),
        }
      }

      it "updates the requested category" do
        put :update, { id: category.id, category: new_attributes }
        category.reload
        expect(category.name).to eq("Example Updated Category")
      end

      it "assigns the requested category as @category" do
        put :update, { id: category.id, category: valid_attributes }
        expect(assigns(:category)).to eq(category)
      end
    end

    describe "with invalid params" do
      it "assigns the category as @category" do
        put :update, { id: category.id, category: invalid_attributes }
        expect(assigns(:category)).to eq(category)
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested category" do
      expect {
        delete :destroy, { id: category.id, format: :json }
      }.to change(Category, :count).by(-1)
    end
  end

end
